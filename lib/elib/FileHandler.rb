module FileHandler
  require 'aws-sdk-core'
  require 'aws-sdk'

  class FileCreation
    def self.save_file_to_directory(url,bookName)
       IO.copy_stream(open(url), '/Users/Rasmus/elibmag/public/filtest/' + bookName + ".epub")
    end

    def self.unzip_file (file, bookName)

      Zip::File.open(file) do |zipfile|
          zipfile.each do |f|
              f_path=File.join("public","testpath",bookName,f.name)
              FileUtils.mkdir_p(File.dirname(f_path))
              zipfile.extract(f, f_path) unless File.exist?(f_path)
            end
      end
    end

  end

  class UnzipHandler
    directoryName = "/public/testpath/"

    def self.unzip_file (file, bookName)

      Zip::File.open(file) do |zipfile|
          zipfile.each do |f|
              f_path=File.join("public","testpath",bookName,f.name)
              FileUtils.mkdir_p(File.dirname(f_path))
              zipfile.extract(f, f_path) unless File.exist?(f_path)
            end
      end
    end
  end
  class FileGet

    def initialize(userID,productName)
      @userID = userID
      @productName = productName
    end

    def get_files_for_user

    end

  end

  class ViewBookHandler
      def initialize(userID)

        @userID = userID
      end
      def get_books
        #test orderID 15547534
        @jsonValue = Elib::ElibAPI.get_order_from_elibAPI(15547534)

        #puts 'Le value to fix', @jsonValue

      end
      def get_ebook_in_epub
         ebookFormat = self.get_different_formats(105)
        #puts 'ebookFormat' , ebookFormat
         ebookUrl = self.get_ebook_url(ebookFormat)

        puts 'theBook url' , ebookUrl

        return ebookUrl
      end
      def get_different_formats(formatID)
        finder = Elib::JsonHandler.new(@jsonValue)
        temp = finder.find_all_values_using_key("OrderFormats")
        orderFormats  = finder.remove_nil_and_blank(temp)
        puts 'innan ifsatster', formatID
        if formatID == 101
          return orderFormats.select {|value| value["FormatID"] == 101 }
        elsif formatID == 102
          return orderFormats.select {|value| value["FormatID"] == 102 }
        elsif formatID == 103
          return orderFormats.select {|value| value["FormatID"] == 103 }
        elsif formatID == 104
          return orderFormats.select {|value| value["FormatID"] == 104 }
        elsif formatID == 105
          return orderFormats.select {|value| value["FormatID"] == 105 }
        elsif formatID == 106
          return orderFormats.select {|value| value["FormatID"] == 106 }
        elsif formatID == 107
          return orderFormats.select {|value| value["FormatID"] == 107 }
        elsif formatID == 110
          return orderFormats.select {|value| value["FormatID"] == 110 }
        else
          #todo
          #puts 'i elsen'
        end
        #puts 'no if'
        return "hej"
        # orderFormats each do |value|
        #   if value['FormatID'].
        # end
      end
      def get_ebook_url(ebookJson)
        url = nil
        puts 'ebook url', ebookJson
        ebookJson.each do |value|
          if value['Contents']
              #puts 'haj', value['Contents']
              contents = value['Contents']
              contents.each do |contentsValue|
                if contentsValue['Url']
                  #puts 'haj' ,contentsValue['Url']
                  url = contentsValue['Url']
                else
                  #puts 'nejn2'
                end
              end
          else
          end
        end

        return url
      end

    end

  class S3FolderUpload

  attr_reader :folder_path, :total_files, :s3_bucket
  attr_accessor :files

  # Initialize the upload class
  #
  # folder_path - path to the folder that you want to upload
  # bucket - The bucket you want to upload to
  # aws_key - Your key generated by AWS defaults to the environemt setting AWS_KEY_ID
  # aws_secret - The secret generated by AWS
  #
  # Examples
  #   => uploader = S3FolderUpload.new("some_route/test_folder", 'your_bucket_name')
  #
  def initialize(folder_path, bucket, aws_key = ENV['AWS_KEY_ID'], aws_secret = ENV['AWS_SECRET'])
    @folder_path       = folder_path
    @files             = Dir.glob("#{folder_path}/**/*")
    @total_files       = files.length
    @connection        = Aws::S3::Resource::new(access_key_id: aws_key, secret_access_key: aws_secret)
    @s3_bucket         = @connection.buckets[bucket]

    puts "files", @files
    puts "s3", @connection
  end

  # public: Upload files from the folder to S3
  #
  # thread_count - How many threads you want to use (defaults to 5)
  #
  # Examples
  #   => uploader.upload!(20)
  #     true
  #   => uploader.upload!
  #     true
  #
  # Returns true when finished the process
  def upload!(thread_count = 5)
    file_number = 0
    mutex       = Mutex.new
    threads     = []

    thread_count.times do |i|
      threads[i] = Thread.new {
        until files.empty?
          mutex.synchronize do
            file_number += 1
            Thread.current["file_number"] = file_number
          end
          file = files.pop rescue nil
          next unless file

          # I had some more manipulation here figuring out the git sha
          # For the sake of the example, we'll leave it simple
          #
          path = file

          puts "[#{Thread.current["file_number"]}/#{total_files}] uploading..."

          data = File.open(file)

          next if File.directory?(data)
          obj = s3_bucket.objects[path]
          obj.write(data, { acl: :public_read })
          end
        }
      end
      threads.each { |t| t.join }
    end
  end


  class S3Cloud
    def initialize

    end

    def self.get_ebook_url_from_cloud(bookName)

      credentials = Aws::Credentials.new(ENV['s3_access_key'], ENV['s3_secret_access_key'])

      #Create client access to bucket
      s3 = Aws::S3::Client.new(region:ENV['aws_region'], credentials: credentials)
      #Using aws sdk core

      puts 'test', s3.list_buckets

      @resp = s3.get_object(bucket:'magazinos-ebook', key:'test/')

      aws_resource = Aws::S3::Resource::new(region:ENV['aws_region'], credentials: credentials)

      @ebookURL = aws_resource.bucket('magazinos-ebook').object(bookName+'/').presigned_url(:get, expires_in: 1*20.minutes)

      @keys = []
        s3.list_objects(bucket: 'magazinos-ebook', prefix: bookName+'/').contents.each { |e|
          @keys << e.key
        }
      puts 'resp' ,@resp.body
      puts 'key', @keys
      puts 'ebookURL', @ebookURL

      return @ebookURL


      #Using fog
      # fog_s3 = Fog::Storage.new({
      #       :provider                 => 'AWS',
      #       :aws_access_key_id        => ENV['s3_access_key'],
      #       :aws_secret_access_key    => ENV['s3_secret_access_key'],
      #       :region                   => ENV['aws_region']
      #       })
      # bucket = 'magazinos-ebook'
      # object_path = 'test/'
      #
      # # url = fog_s3.directories.new(:key => bucket).files.new(:key => object_path).url(expiry,path_style: true)
      # expiry2 = Date.new(2016,06,07).to_time.to_i
      # @url = fog_s3.get_object_url(bucket,object_path,expiry2)
      # puts 'url', @url
      #
      # expiry = Date.new(2016,06,07).to_time.to_i
      # puts 'e', expiry
      # @url2 = fog_s3.directories.new(:key => bucket).files.new(:key => object_path).url(expiry,path_style: true)
      # puts 'url2', @url2
    end
  end



end
